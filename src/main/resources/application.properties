spring.application.name=font-service-Api

#----------------http set start---------------------------
spring.http.encoding.force=true
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
server.port=10011

#字体目录
#web.upload-path=E:/fzsj_mircoservice/api-gateway
#spring.mvc.static-path-pattern=/**
#spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/,file:${web.upload-path}
#font.dirPrefix=E:/fzsj_mircoservice/api-gateway/
#----------------http set end-----------------------------
# log set

#logging.level.com.mircoservice.fontservice.api.controller=DEBUG
logging.file=${spring.application.name}-${server.port}.log
# eureka client set
#eureka.client.serviceUrl.defaultZone=http://59.110.115.47:9002/eureka/
#eureka.instance.perferIpAddress=true
#eureka.instance.instance-id=qiepian:${spring.cloud.client.ipAddress}:${server.port}
#开启健康检查（需要spring-boot-starter-actuator依赖）
#eureka.client.healthcheck.enabled=true

#服务过期时间配置,超过这个时间没有接收到心跳EurekaServer就会将这个实例剔除
#注意，EurekaServer一定要设置eureka.server.eviction-interval-timer-in-ms否则这个配置无效，这个配置一般为服务刷新时间配置的三倍
#默认90s
#eureka.instance.lease-expiration-duration-in-seconds=15
#服务刷新时间配置，每隔这个时间会主动心跳一次
#默认30s
#eureka.instance.lease-renewal-interval-in-seconds=5


#租期更新时间间隔（默认30秒）
#eureka.instance.lease-renewal-interval-in-seconds=10
#租期到期时间（默认90秒）
#eureka.instance.lease-expiration-duration-in-seconds=30

#----------------undertow服务器start-----1 level capability--
server.undertow.uri-encoding=UTF-8
# 最大可用内存<64M,不开启
#server.undertow.buffer-size= # Size of each buffer in bytes.
#server.undertow.buffers-per-region= # Number of buffer per region.
#server.undertow.direct-buffers= # Allocate buffers outside the Java heap.
#//默认值：cpu数量，最小为2.不dong
server.undertow.io-threads=4
# Number of I/O threads to create for the worker.
#server.undertow.max-http-post-size=0 # Maximum size in bytes of the HTTP post content.
#//默认值：io-threads*8
server.undertow.worker-threads=32 
# Number of worker threads.
#----------------undertow服务器end-----1 level capability--


#----------------hystrix baseset start-----2 level capability--
#(必须)调用线程允许请求HystrixCommand.GetFallback()的最大数量，默认10。超出时将会有异常抛出，注意：该项配置对于THREAD隔离模式也起作用
hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests=5000

#----------------hystrix baseset end-----2 level capability--

#----------------hystrix extendset start-----2 level capability--

#在调用方配置，被该调用方的所有方法的超时时间都是该值，优先级低于下边的指定配置.open maybe error
#hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=30000

#在调用方配置，被该调用方的指定方法（HystrixCommandKey方法名）的超时时间是该值
#hystrix.command.HystrixCommandKey.execution.isolation.thread.timeoutInMilliseconds=

#线程池核心线程数,moren 10
#hystrix.threadpool.default.coreSize=10
##BlockingQueue的最大队列数
#hystrix.threadpool.default.maxQueueSize=2000
##即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝
#hystrix.threadpool.default.queueSizeRejectionThreshold=1000

#----------------hystrix extendset end-----2 level capability--

#----------------远程调用feign和ribbon start----------------------------

#全局远程调用超时时间,单独调用配置，例如：服务名.ribbon.ConnectTimeout
ribbon.ConnectTimeout=500
ribbon.ReadTimeout=5000


#开启全局远程调用重试！
ribbon.OkToRetryOnAllOperations=true
ribbon.MaxAutoRetriesNextServer=2
ribbon.MaxAutoRetries=1

#客户端负载均衡算法，设置随机策略
ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule

#开启远程调用全局请求和响应的压缩功能
feign.compression.request.enable=true
feign.compression.response.enable=true

#开启远程全局压缩的类型，超过2048的压缩大小
feign.compression.request.mime-types=text/xml,application/xml,application/json
feign.compression.request.min-request-size=2048

#----------------feign end----------------------------
# db
spring.datasource.url=jdbc:mysql://localhost:3306/mytest?useUnicode=true&characterEncoding=utf8
spring.datasource.username=root
spring.datasource.password=1234
spring.datasource.driverClassName=com.mysql.jdbc.Driver
# 加载mybatis mapper
mybatis.mapper-locations= /mapper/*.xml,/mapperex/*.xml
mybatis.config-location=classpath:mybatis-config.xml
#读写分离

#redis 配置
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=127.0.0.1
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=0

#
eth.url=http://localhost:5201314/
